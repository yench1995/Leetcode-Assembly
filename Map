The basic operation of Map in C#
Dictionary<AnyType, Anytype> dic = new Dictionary<Anytype, AnyType>();
dic.Add(val, val); AnyType[a] = dic[index];

13. Roman to Integer

Given a roman numeral, convert it to an integer.

Input is guaranteed to be within the range from 1 to 3999.

Solution:
/*
 * use a map to put key values and find the Integer quickly
 */
public class Solution {
    public int RomanToInt(string s) {
        if (s == null || s.Length==0) {
                return 0;
	    }
	    Dictionary<Char, int> m = new Dictionary<Char, int>();
	    m.Add('I', 1);
	    m.Add('V', 5);
	    m.Add('X', 10);
	    m.Add('L', 50);
	    m.Add('C', 100);
	    m.Add('D', 500);
	    m.Add('M', 1000);

	    int length = s.Length;
	    int result = m[s[length-1]];
	    for (int i = length - 2; i >= 0; i--) {
	        if (m[s[i+1]] <= m[s[i]]) {
	            result += m[s[i]];
	        } else {
	            result -= m[s[i]];
	        }
	    }
	    return result;
    }
}


17. Letter Combinations of a Phone Number

Given a digit string, return all possible letter combinations that the number could represent.

For example: Input:Digit string "23" Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].

Solution:
/*
 * Use the Deep First Search to get all the possibilities
 * Build a map to store the relationship between phone number and char[] characters
 * If use a StringBuilder, remember to clear the StringBuilder for second use
 */
public class Solution {
    public IList<string> LetterCombinations(string digits) {
        IList<string> result = new List<string>();

        if (digits == null || digits.Equals("")) {
            return result;
        }

        Dictionary<char, char[]> map = new Dictionary<char, char[]>();
        map.Add('0', new char[] {});
        map.Add('1', new char[] {});
        map.Add('2', new char[] { 'a', 'b', 'c' });
        map.Add('3', new char[] { 'd', 'e', 'f' });
        map.Add('4', new char[] { 'g', 'h', 'i' });
        map.Add('5', new char[] { 'j', 'k', 'l' });
        map.Add('6', new char[] { 'm', 'n', 'o' });
        map.Add('7', new char[] { 'p', 'q', 'r', 's' });
        map.Add('8', new char[] { 't', 'u', 'v'});
        map.Add('9', new char[] { 'w', 'x', 'y', 'z' });

        StringBuilder sb = new StringBuilder();
        helper(map, digits, sb, result);

        return result;
    }

    private void helper(Dictionary<char, char[]> map, string digits, 
        StringBuilder sb, IList<string> result) {
        if (sb.Length == digits.Length) {
            result.Add(sb.ToString());
            return;
        }
        char[] cur = map[digits[sb.Length]];

        foreach (char c in cur) {
            sb.Append(c);
            helper(map, digits, sb, result);
            sb.Remove(sb.Length - 1, 1);
        }
    }
}
