Summary：
& AND 两个位都为1时，结果为1
| OR  两个位都为0时，结果为0
^ XOR 两个位相同为0， 相异为1
~ NOT 取反操作
<< 各二进位全部左移若干位，高位丢弃，低位补0
>> 各二进位全部右移若干位，对无符号数，高位补0，有符号数，各编译器处理方法不一样，有的补符号位（算术右移），有的补0（逻辑右移）

Problem 1:
Reverse bits of a given 32 bits unsigned integer.

For example, given input 43261596 (represented in binary as 00000010100101000001111010011100), return 964176192 (represented in binary as 00111001011110000010100101000000).

Follow up: If this function is called many times, how would you optimize it?

Solution 1: 
time complexity O(1) space complexity O(1)
原数右移取出最低位，赋值给新数最低位再左移；
/** 
 * Time complexity O(1);
 * Space complexity O(1) ;
 */
public class Solution {
    // you need treat n as an unsigned value
    public int reverseBits(int n) {
        int res = 0;
        for(int i = 0; i < 32; i++, n >>= 1){
            res = res << 1 | (n & 1);
        }
        return res;
    }
}

Follow up Answer:
用Map记录之前反转过的数字和结果,更好的优化方法是将其按照Byte分成4段存储，节省空间;
// cache
private final Map<Byte, Integer> cache = new HashMap<Byte, Integer>();
public int reverseBits(int n) {
    byte[] bytes = new byte[4];
    for (int i = 0; i < 4; i++) // convert int into 4 bytes
        bytes[i] = (byte)((n >>> 8*i) & 0xFF);
    int result = 0;
    for (int i = 0; i < 4; i++) {
        result += reverseByte(bytes[i]); // reverse per byte
        if (i < 3)
            result <<= 8;
    }
    return result;
}

private int reverseByte(byte b) {
    Integer value = cache.get(b); // first look up from cache
    if (value != null)
        return value;
    value = 0;
    // reverse by bit
    for (int i = 0; i < 8; i++) {
        value += ((b >>> i) & 1);
        if (i < 7)
            value <<= 1;
    }
    cache.put(b, value);
    return value;
}

Problem 2:
Calculate the sum of two integers a and b, but you are not allowed to use the operator + and -.
/**
 * sum means the no-carry bit
 * carry means the carry bit << 1
 * until the carry = 0
 */
public class Solution {
    public int GetSum(int a, int b) {
        if(b == 0) return a;
        int sum = a ^ b;
        int carry = (a & b) << 1;
        return GetSum(sum, carry);
    }
}
