<Linked List>
Problem 1: Reverse a singly linked list.

Solution:

/**Assume that we have linked list 1 → 2 → 3 → Ø, we would like to change it to Ø ← 1 ← 2 ← 3.
 * Time complexity : O(n).
 * Space complexity : O(1).
 */
 
/**poin
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode ReverseList(ListNode head) {
        ListNode prev = null;
        ListNode curr = head;
        while(curr!=null)
        {
            ListNode nextItem = curr.next;
            curr.next = prev;
            prev = curr;
            curr = nextItem;
        }
        return prev;
    }
}


Problem 2:Odd Even Linked List

Given a singly linked list, group all odd nodes together followed by the even nodes. 
Please note here we are talking about the node number and not the value in the nodes.

Solution: 

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode OddEvenList(ListNode head) {
        if(head == null)
            return null;
        ListNode odd = head;
        ListNode even = head.next;
        ListNode evenhead = even;
        while(even != null && even.next != null)
        {
            odd.next = even.next;
            odd = odd.next;
            even.next = odd.next;
            even = even.next;
        }        
        odd.next = evenhead;
        return head;       
    }
}


Problem 3:Remove Nth Node From End of List
Given a linked list, remove the nth node from the end of list and return its head.

For example,

   Given linked list: 1->2->3->4->5, and n = 2.

   After removing the second node from the end, the linked list becomes 1->2->3->5.
Note:
Given n will always be valid.
Try to do this in one pass.

Solution 1:
/**
 * The "dummy" node is used to simplify some corner cases such as a list with only one node, 
 * or removing the head of the list.
 */
public ListNode removeNthFromEnd(ListNode head, int n) {
    ListNode dummy = new ListNode(0);
    dummy.next = head;
    int length  = 0;
    ListNode first = head;
    while (first != null) {
        length++;
        first = first.next;
    }
    length -= n;
    first = dummy;
    while (length > 0) {
        length--;
        first = first.next;
    }
    first.next = first.next.next;
    return dummy.next;
}

Solution 2:
/** 
 * use two pointers
 * the first pointer advances the second pointer n+1 
 * until the first arrives past the last "null"
 */
public ListNode removeNthFromEnd(ListNode head, int n) {
    ListNode dummy = new ListNode(0);
    dummy.next = head;
    ListNode first = dummy;
    ListNode second = dummy;
    // Advances first pointer so that the gap between first and second is n nodes apart
    for (int i = 1; i <= n + 1; i++) {
        first = first.next;
    }
    // Move first to the end, maintaining the gap
    while (first != null) {
        first = first.next;
        second = second.next;
    }
    second.next = second.next.next;
    return dummy.next;
}




<ArrayList>
Problem 1: Merge Sorted Array

Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.

Note:
You may assume that nums1 has enough space (size that is greater or equal to m + n) 
to hold additional elements from nums2. The number of elements initialized in nums1 and nums2 are m and n respectively.

Solution: 
/**
 * in C#, the way of passing array is by reference
 * in this kind of question, it's useless to create a new nums3 = nums1
 * just change in the place of nums1
 */
public class Solution {
    public void Merge(int[] nums1, int m, int[] nums2, int n) 
    {
        int i = m-1, j = n-1, index = m + n - 1;
        while (i >= 0 && j >= 0) 
        {
            if (nums1[i] > nums2[j]) 
            {
                nums1[index--] = nums1[i--];
            }
            else 
            {
                nums1[index--] = nums2[j--];
            }
        }
        while (i >= 0) 
        {
            nums1[index--] = nums1[i--];
        }
        while (j >= 0) 
        {
            nums1[index--] = nums2[j--];
        }
    }
}

<Clever Algorithms>
Problem 11. Container With Most Water

Given n non-negative integers a1, a2, ..., an, where each represents a point at coordinate (i, ai). 
n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). 
Find two lines, which together with x-axis forms a container, such that the container contains the most water.

/*
 * Use two pointers to solve, one from the start, one from the end
 * We only need to move the higher boundary, but remain the lower boundary
 * In this case, it is O(n) time complexity
 */
public class Solution {
    public int MaxArea(int[] height) {
        int maxArea = 0; 
        int start = 0;
        int end = height.Length - 1;
        while(start < end)
        {
            int area = height[start] >= height[end] ? height[end] * (end - start) : height[start] * (end - start);
            if(area > maxArea) maxArea = area;
            if(height[end] >= height[start]) start++;
            else end--;
        }
        
        return maxArea;
    }
}


15. 3Sum

Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? 
Find all unique triplets in the array which gives the sum of zero.

public class Solution {
/* 
 * Fix one point and push on
 * Use two pointers from the beginning and end.
 */
    public IList<IList<int>> ThreeSum(int[] nums) {
        IList<IList<int>> ret = new List<IList<int>>();
        if(nums.Length < 3) return ret;
        Array.Sort(nums);
        Dictionary<string, bool> myDic = new Dictionary<string, bool>();
        string str;
        int start;
        int end;
        for(int i = 0; i < nums.Length - 2; i++)
        {
            start = i + 1;
            end = nums.Length - 1;
            while(start < end)
            {
                if(nums[i] + nums[start] + nums[end] == 0)
                {
                    str = nums[i].ToString() + nums[start].ToString() + nums[end].ToString();
                    if(myDic.ContainsKey(str))
                    {
                        start++;
                        end--;
                    }
                    else
                    {
                        myDic.Add(str, true);
                        IList<int> triplet = new List<int>{nums[i], nums[start], nums[end]};
                        ret.Add(triplet);
                        start++;
                        end--;
                    }
                }
                else if(nums[i] + nums[start] + nums[end] > 0)
                {
                    end--;
                }
                else
                {
                    start++;
                }
            }
        }
        return ret;

    }
}


31. Next Permutation

Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.
If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).
The replacement must be in-place, do not allocate extra memory.
1,1,5 → 1,5,1


Solution:

public class Solution {
    public void reverse(int[] nums, int start, int end) {
        for (int i = start, j = end; i < j; i++, j--) {
            int temp = nums[i];
            nums[i] = nums[j];
            nums[j] = temp;
        }
    }
    public void nextPermutation(int[] nums) {
        // find the last increase index
        int index = -1;
        for (int i = nums.Length - 2; i >= 0; i--) {
            if (nums[i] < nums[i + 1]) {
                index = i;
                break;
            }
        }
        if (index == -1) {
            reverse(nums, 0, nums.Length - 1);
            return;
    
      }
        
        // find the first bigger one
        int biggerIndex = index + 1;
        for (int i = nums.Length - 1; i > index; i--) {
            if (nums[i] > nums[index]) {
                biggerIndex = i;
                break;
            }
        }
        
        // swap them to make the permutation bigger
        int temp = nums[index];
        nums[index] = nums[biggerIndex];
        nums[biggerIndex] = temp;
        
        // reverse the last part
        reverse(nums, index + 1, nums.Length - 1);
    }
}

Problem 34: Search for a Range

Given an array of integers sorted in ascending order, find the starting and ending position of a given target value.
Your algorithm's runtime complexity must be in the order of O(log n).
If the target is not found in the array, return [-1, -1].

Given [5, 7, 7, 8, 8, 10] and target value 8,
return [3, 4].

/*
 * Because the limited time is  O(log n)
 * The easy way is to use binary searching
 */
public class Solution {
    public int[] SearchRange(int[] nums, int target) {
        if(nums.Length == 0) return new int[]{-1, -1};
        
        int start, end, mid;
        int[] range = new int[2];
        
        start = 0;
        end = nums.Length - 1;
        while(start + 1 < end)
        {
            mid = start + (end - start)/2;
            if(nums[mid] == target)
            {
                end = mid;
            }
            else if (nums[mid] < target)
            {
                start = mid;
            }
            else
            {
                end = mid;
            }
        }
        
        if(nums[start] == target)
        {
            range[0] = start;
        }
        else if(nums[end] == target)
        {
            range[0] = end;
        }
        else
        {
            range[0] = range[1] = -1;
            return range;
        }
        
        start = 0;
        end = nums.Length - 1;
        while(start + 1 < end)
        {
            mid = start + (end - start)/2;
            if(nums[mid] == target)
            {
                start = mid;
            }
            else if (nums[mid] < target)
            {
                start = mid;
            }
            else
            {
                end = mid;
            }
        }
        
        if(nums[end] == target)
        {
            range[1] = end;
        }
        else if(nums[start] == target)
        {
            range[1] = start;
        }
        else
        {
            range[0] = range[1] = -1;
            return range;
        }
        
        return range;
    }
}


Problem 35. Search Insert Position

Given a sorted array and a target value, return the index if the target is found. 
If not, return the index where it would be if it were inserted in order.
You may assume no duplicates in the array.

[1,3,5,6], 5 → 2
[1,3,5,6], 2 → 1

public class Solution {
    public int SearchInsert(int[] nums, int target) {
        if(nums == null || nums.Length == 0) return 0;
        int start = 0;
        int end = nums.Length - 1;
        while(start <= end)
        {
            int mid = start + (end - start)/2;
            if(nums[mid] < target)
            {
                start = mid + 1;
            }
            else if (nums[mid] > target)
            {
                end = mid - 1;
            }
            else
            {
                return mid;
            }
        }        
        return start;
    }
}
